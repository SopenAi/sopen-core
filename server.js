
import 'dotenv/config'; 
import express from 'express';
import path from 'path';
import fs from 'fs'; 
import { fileURLToPath } from 'url';
import config from './config/config.js'; 
import { connectDB } from './database/db.js';

import { connectRedis } from './database/cache.js'; 
import { setupAndStartScheduler } from './config/scheduler.js';
import { logSuccess, logError } from './utils/notifier.js';
import { startFileWatcher } from './utils/fileWatcher.js'; 
import { createHomepage } from './website/generator.js'; 

import * as admin from 'firebase-admin';
import publicRoutes from './routes/publicRoutes.js'; 
import userRoutes from './routes/userRoutes.js';   
import adminRoutes from './routes/adminRoutes.js'; 


const app = express();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const WEBSITE_PAGES_PATH = path.resolve(__dirname, 'website', 'pages');
const WEBSITE_ASSETS_PATH = path.resolve(__dirname, 'website', 'assets');


if (process.env.FIREBASE_CONFIG_JSON) {
    try {
        const serviceAccount = JSON.parse(process.env.FIREBASE_CONFIG_JSON);
        if (!admin.apps.length) {
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount)
            });
            logSuccess('╪к┘Е ╪к┘З┘К╪ж╪й Firebase Admin SDK ╪и┘Ж╪м╪з╪н.', 'FIREBASE_INIT');
        }
    } catch (error) {
        logError('┘Б╪┤┘Д ╪н╪з╪│┘Е ┘Б┘К ╪к┘З┘К╪ж╪й Firebase Admin SDK (╪к╪н┘В┘В ┘Е┘Ж FIREBASE_CONFIG_JSON).', error, 'FIREBASE_INIT_FAIL');
    }
} else {
    console.warn('[FIREBASE] ╪к╪н╪░┘К╪▒: ┘Е╪к╪║┘К╪▒ FIREBASE_CONFIG_JSON ┘Е┘Б┘В┘И╪п. ╪│┘К╪к┘Е ╪к╪м╪з┘З┘Д ┘Е┘К╪▓╪з╪к ╪з┘Д┘Е╪╡╪з╪п┘В╪й ╪з┘Д╪е╪п╪з╪▒┘К╪й.');
}



async function startServer() {
    logSuccess('╪м╪з╪▒┘К ╪и╪п╪б ╪к╪┤╪║┘К┘Д ┘Ж╪╕╪з┘Е ╪з┘Д┘Ж╪┤╪▒ ╪з┘Д╪░┘Г┘К (Sopen)...', 'SERVER_INIT');
    
    if (config.MONGODB_URI.includes('localhost') && process.env.NODE_ENV === 'production') {
        logError('тЪая╕П ╪к╪н╪░┘К╪▒: ╪з╪│╪к╪о╪п╪з┘Е ╪▒╪з╪и╪╖ MongoDB ╪з┘Б╪к╪▒╪з╪╢┘К ┘Б┘К ╪и┘К╪ж╪й ╪з┘Д╪е┘Ж╪к╪з╪м. ╪к╪н┘В┘В ┘Е┘Ж ┘Е┘Д┘Б .env.', null, 'CONFIG_CHECK_FAIL');
    }
    
    try {

        await connectDB();
        
        connectRedis().catch(err => logError('┘Б╪┤┘Д ╪з┘Д╪з╪к╪╡╪з┘Д ╪и┘А Redis. ╪│┘К╪│╪к┘Е╪▒ ╪з┘Д╪о╪з╪п┘Е ┘Б┘К ╪з┘Д╪╣┘Е┘Д ╪и╪п┘И┘Ж ┘Г╪з╪┤.', err, 'REDIS_INIT_NON_CRITICAL'));
        
        if (config.RABBITMQ_URI) {
             console.log('[RABBITMQ_DISABLED] ╪к╪м╪з┘И╪▓ ╪з╪к╪╡╪з┘Д RabbitMQ ┘Е╪д┘В╪к╪з┘Л ╪и╪│╪и╪и ╪г╪о╪╖╪з╪б ╪з┘Д╪г╪░┘И┘Ж╪з╪к. ╪│╪к╪╣┘Е┘Д ╪п┘И╪▒╪й ╪з┘Д┘Ж╪┤╪▒ ╪и╪┤┘Г┘Д ┘Е╪к╪▓╪з┘Е┘Ж ┘И╪и╪и╪╖╪б.');
             console.log('[RABBITMQ_DISABLED] ┘Д╪е╪╣╪з╪п╪й ╪к┘Б╪╣┘К┘Д RabbitMQ╪М ┘В┘Е ╪и╪е╪▓╪з┘Д╪й ╪з┘Д╪к╪╣┘Д┘К┘В ┘Е┘Ж connectMQ ┘И startConsumer ┘Б┘К server.js.');
             // connectMQ().catch(err => logError('┘Б╪┤┘Д ╪з┘Д╪з╪к╪╡╪з┘Д ╪и┘А RabbitMQ. ╪│┘К╪│╪к┘Е╪▒ ╪з┘Д╪о╪з╪п┘Е ╪и╪з┘Д╪╣┘Е┘Д.', err, 'MQ_INIT_NON_CRITICAL'));
             // startConsumer(); 
        }

        
        app.use('/assets', express.static(WEBSITE_ASSETS_PATH));
        app.use('/pages', express.static(WEBSITE_PAGES_PATH));
        app.use(express.json());
        
        app.use('/api', publicRoutes);
        app.use('/api', userRoutes);
        app.use('/api/admin', adminRoutes);

        app.get('/dashboard', (req, res) => { 
             res.sendFile(path.join(WEBSITE_PAGES_PATH, 'dashboard.html'));
        });
        
        app.get('/', async (req, res) => {
            const homepagePath = path.join(WEBSITE_PAGES_PATH, 'index.html'); 
            
            if (!fs.existsSync(homepagePath)) {
                await createHomepage().catch(err => logError('┘Б╪┤┘Д ┘Б┘К ╪к┘И┘Д┘К╪п ╪з┘Д╪╡┘Б╪н╪й ╪з┘Д╪▒╪ж┘К╪│┘К╪й ╪з┘Д╪г┘И┘Д┘К╪й.', err, 'HOMEPAGE_INIT_FAIL'));
            }

            if (fs.existsSync(homepagePath)) {
                 res.sendFile(homepagePath);
            } else {
                 res.status(503).send('<h1>Sopen</h1><p>╪м╪з╪▒┘К ╪к┘З┘К╪ж╪й ╪з┘Д┘Ж╪╕╪з┘Е╪М ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Д╪з╪н┘В╪з┘Л.</p>');
            }
           
        });
        
        setupAndStartScheduler(); 
        startFileWatcher();

        const SERVER_PORT = process.env.PORT || config.PORT; 

        app.listen(SERVER_PORT, () => { 
            logSuccess(`ЁЯЪА ╪з┘Д╪о╪з╪п┘Е ┘К╪╣┘Е┘Д ╪╣┘Д┘Й: ${config.HOSTNAME} ╪╣┘Д┘Й ┘Е┘Ж┘Б╪░ ${SERVER_PORT}`, 'SERVER');
            logSuccess('╪з┘Д╪м╪п┘И┘Д╪й ┘И┘Ж╪╕╪з┘Е ╪з┘Д┘Е╪▒╪з┘В╪и╪й ┘Ж╪┤╪╖╪з┘Ж ╪з┘Д╪в┘Ж.', 'SERVER');
            console.log('[RABBITMQ_DISABLED] ╪з┘Д┘Ж╪┤╪▒ ╪з┘Д╪в┘Ж ┘К╪к┘Е ╪и╪┤┘Г┘Д ┘Е╪к╪▓╪з┘Е┘Ж (Direct Publishing).');
            console.log('[REDIS_DISABLED] ╪з┘Д┘Г╪з╪┤ ╪║┘К╪▒ ┘Ж╪┤╪╖. ┘К╪▒╪м┘Й ┘Е╪▒╪з╪м╪╣╪й ╪│╪м┘Д╪з╪к ╪з┘Д╪г╪о╪╖╪з╪б ┘Д╪к╪╡╪н┘К╪н ╪з┘Д╪з╪к╪╡╪з┘Д.');
        });

    } catch (error) {
        logError('┘Б╪┤┘Д ╪н╪з╪│┘Е ┘Б┘К ╪и╪п╪б ╪к╪┤╪║┘К┘Д ╪з┘Д╪о╪з╪п┘Е.', error, 'SERVER_FAIL');
        process.exit(1);
    }
}

startServer();
